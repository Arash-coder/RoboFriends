{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","robots.js","Searchbox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","email","name","id","className","src","alt","CardList","robots","cardcomponent","map","ueser","i","key","username","Searchbox","searchfield","searchchange","type","placeholder","onChange","App","onsearchchange","event","setState","target","value","filteredrobots","state","filter","toLowerCase","includes","console","log","this","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,GAExB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACI,4BAAKJ,GACL,2BAAID,MCYLM,EAlBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAQC,GACtC,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdD,KAAMM,EAAOI,GAAGV,KAChBD,MAAOO,EAAOI,GAAGX,WAKrB,OACI,6BACKQ,ICjBAD,EAAS,CACpB,CACEL,GAAI,EACJD,KAAM,gBACNY,SAAU,OACVb,MAAO,qBAET,CACEE,GAAI,EACJD,KAAM,eACNY,SAAU,YACVb,MAAO,qBAET,CACEE,GAAI,EACJD,KAAM,mBACNY,SAAU,WACVb,MAAO,sBAET,CACEE,GAAI,EACJD,KAAM,mBACNY,SAAU,WACVb,MAAO,6BAET,CACEE,GAAI,EACJD,KAAM,mBACNY,SAAU,SACVb,MAAO,4BAET,CACEE,GAAI,EACJD,KAAM,uBACNY,SAAU,mBACVb,MAAO,2BAET,CACEE,GAAI,EACJD,KAAM,kBACNY,SAAU,eACVb,MAAO,0BAET,CACEE,GAAI,EACJD,KAAM,2BACNY,SAAU,gBACVb,MAAO,wBAET,CACEE,GAAI,EACJD,KAAM,kBACNY,SAAU,WACVb,MAAO,2BAET,CACEE,GAAI,GACJD,KAAM,qBACNY,SAAU,iBACVb,MAAO,2BC5CIc,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACJ,yBAAKb,UAAU,OACX,2BACAA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCgCCI,E,kDAnCX,aAAc,IAAD,8BACT,gBAWJC,eAAgB,SAACC,GACb,EAAKC,SAAS,CAACR,YAAYO,EAAME,OAAOC,QACxC,IAAMC,EAAiB,EAAKC,MAAMpB,OAAOqB,QAAO,SAAArB,GAC5C,OAAOA,EAAON,KAAK4B,cAAcC,SAAS,EAAKH,MAAMZ,YAAYc,kBAErEE,QAAQC,IAAIN,IAfZ,EAAKC,MAAO,CACRpB,OAAO,GACPQ,YAAa,IAJR,E,gEAQTkB,KAAKV,SAAS,CACVhB,OAAOA,M,+BAUL,IAAD,OACCmB,EAAiBO,KAAKN,MAAMpB,OAAOqB,QAAO,SAAArB,GAChD,OAAOA,EAAON,KAAK4B,cAAcC,SAAS,EAAKH,MAAMZ,YAAYc,kBAEjE,OACI,yBAAK1B,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWa,aAAciB,KAAKZ,iBAC9B,kBAAC,EAAD,CAAUd,OAAQmB,S,GA5BhBQ,aCElBC,IAASC,OACP,kBAAC,EAAD,MAEDC,SAASC,eAAe,SNyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,a","file":"static/js/main.79aaac0e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({email ,name ,id}) =>{\r\n    \r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200*200` }alt=\"photo\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card ;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{ \r\n    const cardcomponent = robots.map((ueser , i) =>{\r\n        return (            \r\n        <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}\r\n         />\r\n         )\r\n\r\n    })\r\n    return(\r\n        <div>\r\n            {cardcomponent}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield,searchchange}) => {\r\n    return(\r\n<div className=\"pa2\">\r\n    <input\r\n    className=\"pa3 ba b--green bg-lightest-blue\"\r\n    type=\"search\"\r\n    placeholder=\"search robots\"\r\n    onChange={searchchange}\r\n      />\r\n</div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport {robots} from './robots'\r\nimport Searchbox from './Searchbox';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            robots:[],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.setState({\r\n            robots:robots\r\n        })\r\n    }\r\n    onsearchchange =(event) =>{\r\n        this.setState({searchfield:event.target.value})\r\n        const filteredrobots = this.state.robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        console.log(filteredrobots);\r\n    }\r\n    render() {\r\n        const filteredrobots = this.state.robots.filter(robots=>{\r\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1>RoboFriends</h1>\r\n                <Searchbox searchchange={this.onsearchchange}/>\r\n                <CardList robots={filteredrobots} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';  \nimport * as serviceWorker from './serviceWorker'; \nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n  <App />\n\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}